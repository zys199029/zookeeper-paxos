zookeeper可以保证如下分布式一致性特性：
	顺序一致性：从同一个客户端发起的事务请求，最终将会严格的按照其发起顺序被应用到zookeeper中去。
	原子性：所有事务请求的处理结果在整个集群中所有机器上的应用情况是一致的，也就是说要么整个集群所有机器都成功应用了某一个事务，要么都没有应用，一定不会出现集群中部分机器应用了事务，
	而另一部分没有应用的情况。
	单一视图：无论客户端连接的是哪台zookeeper服务器，其看到的服务端数据模型都是一样的。
	可靠性：一旦服务端成功应用了一个事务，并完成对客户端的响应，那么该事务所引起的服务端状态变更将会被一直保留下来，除非有另一个事务又对其进行了变更。
	实时性：仅仅保证一定的时间段内，客户端最终一定能够从服务器端上读取到最新的数据状态。
	
zookeeper的四个设计目标：
	1、简单的数据模型：能够通过一个共享的、树型结构的名字空间来进行相互协调。
	2、可以构建集群。
	3、顺序访问：对于来自客户端的每个变更请求，zookeeper都会分配一个全局唯一的递增编号，这个编号反映了所有事务操作的先后顺序。
	4、高性能：由于zookeeper将全量数据存储在内存中，并直接服务于客户端的所有非事务请求，因此它尤其适合于以读操作为主的应用场景。
	
zookeeper的基本概念：
	集群角色：通常在分布式系统中，最典型的集群模式是主备模式，在这种模式下，我们把能够处理所有写操作的机器称为master，把所有通过异步方式获取最新数据，并提供读服务的机器称为slave。
	而在zookeeper中，引入了leader、follower、observer三个角色，leader服务器为客户端提供读写服务，follower、observer都能够提供读服务。
	会话：指客户端会话，一个客户端连接是指客户端和服务器之间的一个tcp长连接，从第一次连接建立开始，客户端会话的生命周期也开始了，通过这个连接，客户端能够通过心跳检测与服务器保持有效的
	会话，也能够向zookeeper服务器发送请求并接受响应，同时还能够通过该连接接收来自服务器的Watch事件通知，session的sessionTimeout值用来设置一个客户端会话的超时时间。
	数据节点：每个znode上都会保存自己的数据内容，同时还会保存一系列属性信息，znode可以分为持久节点和临时节点两类。